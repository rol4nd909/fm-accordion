---
import slugify from "slugify";
import { Icon } from "astro-icon/components";
import type { CollectionEntry } from "astro:content";

type Props = {
  accordionItems: CollectionEntry<"faqs">["data"][];
  title: string;
  isFirstExpanded?: boolean;
};

const { accordionItems, title, isFirstExpanded } = Astro.props;
---

<section
  class="accordion js_accordion"
  aria-labelledby={slugify(title)}
  data-isFirstExpanded={isFirstExpanded}
>
  <h1 class="text-step-5 text-primary" id={slugify(title)}>
    <Icon name="icon-star" width={40} />
    {title}
  </h1>

  {
    accordionItems.map((item, index) => (
      <div class="panel js-accordion-panel">
        <h2 id={`panel${index}-heading`}>
          <button
            class="js-accordion-trigger"
            aria-controls={`panel${index}-content`}
            aria-expanded={isFirstExpanded && index === 0 ? "true" : "false"}
          >
            <span>{item.question}</span>

            <svg viewBox="0 0 32 32">
              <line x1="16" y1="4" x2="16" y2="28" stroke="currentColor" />
              <line x1="4" y1="16" x2="28" y2="16" stroke="currentColor" />
            </svg>
          </button>
        </h2>

        <div
          class="js-accordion-content"
          id={`panel${index}-content`}
          aria-labelledby={`panel${index}-heading`}
          aria-hidden={isFirstExpanded && index === 0 ? "false" : "true"}
          role="region"
        >
          <div class="answer">
            <p>{item.answer}</p>
          </div>
        </div>
      </div>
    ))
  }
</section>

<style>
  .accordion {
    --duration: 375ms;
    --ease: cubic-bezier(0.34, 1.56, 0.64, 1);

    margin-block-end: 2rem;
    padding-block-start: clamp(1.625rem, -0.375rem + 5.33vw, 2.625rem);
    padding-block-end: clamp(0rem, -2rem + 5.33vw, 1rem);
    padding-inline: clamp(1.5rem, -0.5rem + 5.33vw, 2.5rem);
    background-color: var(--color-nutral);
    border-radius: clamp(0.5rem, -0.5rem + 2.67vw, 1rem);
    box-shadow: 0 -0.5rem 3rem hsl(292 42% 14% / 0.3);
  }

  h1 {
    display: flex;
    align-items: center;
    gap: 1.5rem;
    margin-block-end: 0.75rem;

    > svg {
      inline-size: clamp(1.5rem, -0.5rem + 5.33vw, 2.5rem);
      flex-shrink: 0;
      color: var(--color-highlight);
    }
  }

  .panel {
    cursor: pointer;
    padding-block-start: clamp(0.938rem, -0.563rem + 4vw, 1.688rem);
    padding-block-end: 1.75rem;

    + .panel {
      border-block-start: 1px solid var(--color-light);
    }

    @media (--is-mouse) {
      &:is(:hover, :focus-within) {
        button {
          color: var(--color-highlight);
        }
      }
    }

    &:is(:focus-within) {
      outline: 2px solid var(--color-highlight);
      outline-offset: 2px;
    }

    > div {
      display: grid;
      grid-template-rows: 0fr;
      transition: grid-template-rows var(--duration) var(--ease);

      > * {
        opacity: 0;
        transition: opacity var(--duration) 0s;
      }
    }

    > [aria-hidden="false"] {
      grid-template-rows: 1fr;

      > * {
        opacity: 1;
        transition-delay: 0.1s;
      }
    }
  }

  .answer {
    overflow: hidden;

    > :first-child {
      margin-block-start: 1.625rem;
    }
  }

  button {
    --_clr-bg: var(--color-highlight);

    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 1rem;
    inline-size: 100%;
    padding: 0;
    font-size: var(--size-step-1);
    background-color: transparent;
    border: none;
    outline: 0;
    font-weight: 600;
    text-align: left;
    cursor: pointer;
    transition: color var(--duration) var(--ease);
    color: var(--color-primary);

    > svg {
      flex-grow: 0;
      flex-shrink: 0;
      padding: 0.25rem;
      inline-size: 1.5rem;
      aspect-ratio: 1;
      background-color: var(--_clr-bg);
      border-radius: 50%;
      color: var(--color-nutral);
      stroke-width: 4;
      stroke-linecap: round;

      > :first-child {
        transition: opacity 0.5s;
        transition-timing-function: cubic-bezier(0.05, 0.61, 0.41, 0.95);
      }
    }

    &[aria-expanded="true"] > svg {
      --_clr-bg: var(--color-primary);

      rotate: 180deg;
      transition: rotate 0.5s;
      transition-timing-function: cubic-bezier(0.05, 0.61, 0.41, 0.95);

      > :first-child {
        opacity: 0;
      }
    }
  }
</style>

<script>
  export const Accordion = (domNode: HTMLElement) => {
    const toggleAccordion = (panelToActivate: HTMLElement) => {
      const activeButton = panelToActivate.querySelector<HTMLButtonElement>(
        ".js-accordion-trigger"
      );
      const activePanel = panelToActivate.querySelector<HTMLElement>(
        ".js-accordion-content"
      );
      const activePanelIsOpened = activeButton?.getAttribute("aria-expanded");

      if (activePanelIsOpened === "true") {
        activeButton?.setAttribute("aria-expanded", "false");
        activePanel?.setAttribute("aria-hidden", "true");
      } else {
        activeButton?.setAttribute("aria-expanded", "true");
        activePanel?.setAttribute("aria-hidden", "false");
      }
    };

    const onButtonClick = (e: Event) => {
      const activePanel = (e.target as HTMLElement).closest(
        ".js-accordion-panel"
      ) as HTMLElement;

      if (!activePanel) return;

      toggleAccordion(activePanel);
    };

    domNode.addEventListener("click", onButtonClick);
  };

  // init accordions
  const accordions = document.querySelectorAll<HTMLElement>(".accordion");
  accordions.forEach(Accordion);
</script>
